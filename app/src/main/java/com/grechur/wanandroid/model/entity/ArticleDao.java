package com.grechur.wanandroid.model.entity;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE".
*/
public class ArticleDao extends AbstractDao<Article, Integer> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Author = new Property(0, String.class, "author", false, "author");
        public final static Property ApkLink = new Property(1, String.class, "apkLink", false, "apkLink");
        public final static Property ChapterId = new Property(2, int.class, "chapterId", false, "chapterId");
        public final static Property ChapterName = new Property(3, String.class, "chapterName", false, "chapterName");
        public final static Property Collect = new Property(4, boolean.class, "collect", false, "collect");
        public final static Property CourseId = new Property(5, int.class, "courseId", false, "courseId");
        public final static Property Desc = new Property(6, String.class, "desc", false, "desc");
        public final static Property EnvelopePic = new Property(7, String.class, "envelopePic", false, "envelopePic");
        public final static Property Id = new Property(8, int.class, "id", true, "ID");
        public final static Property Fresh = new Property(9, boolean.class, "fresh", false, "fresh");
        public final static Property Link = new Property(10, String.class, "link", false, "link");
        public final static Property NiceDate = new Property(11, String.class, "niceDate", false, "niceDate");
        public final static Property Origin = new Property(12, String.class, "origin", false, "origin");
        public final static Property ProjectLink = new Property(13, String.class, "projectLink", false, "projectLink");
        public final static Property PublishTime = new Property(14, long.class, "publishTime", false, "publishTime");
        public final static Property SuperChapterName = new Property(15, String.class, "superChapterName", false, "superChapterName");
        public final static Property SuperChapterId = new Property(16, int.class, "superChapterId", false, "superChapterId");
        public final static Property Title = new Property(17, String.class, "title", false, "title");
        public final static Property Type = new Property(18, int.class, "type", false, "type");
        public final static Property UserId = new Property(19, int.class, "userId", false, "userId");
        public final static Property Visible = new Property(20, int.class, "visible", false, "visible");
        public final static Property Zan = new Property(21, int.class, "zan", false, "name");
    }

    private Query<Article> naviArticle_ArticlesQuery;

    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"author\" TEXT," + // 0: author
                "\"apkLink\" TEXT," + // 1: apkLink
                "\"chapterId\" INTEGER NOT NULL ," + // 2: chapterId
                "\"chapterName\" TEXT," + // 3: chapterName
                "\"collect\" INTEGER NOT NULL ," + // 4: collect
                "\"courseId\" INTEGER NOT NULL ," + // 5: courseId
                "\"desc\" TEXT," + // 6: desc
                "\"envelopePic\" TEXT," + // 7: envelopePic
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 8: id
                "\"fresh\" INTEGER NOT NULL ," + // 9: fresh
                "\"link\" TEXT," + // 10: link
                "\"niceDate\" TEXT," + // 11: niceDate
                "\"origin\" TEXT," + // 12: origin
                "\"projectLink\" TEXT," + // 13: projectLink
                "\"publishTime\" INTEGER NOT NULL ," + // 14: publishTime
                "\"superChapterName\" TEXT," + // 15: superChapterName
                "\"superChapterId\" INTEGER NOT NULL ," + // 16: superChapterId
                "\"title\" TEXT," + // 17: title
                "\"type\" INTEGER NOT NULL ," + // 18: type
                "\"userId\" INTEGER NOT NULL ," + // 19: userId
                "\"visible\" INTEGER NOT NULL ," + // 20: visible
                "\"name\" INTEGER NOT NULL );"); // 21: zan
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Article entity) {
        stmt.clearBindings();
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(1, author);
        }
 
        String apkLink = entity.getApkLink();
        if (apkLink != null) {
            stmt.bindString(2, apkLink);
        }
        stmt.bindLong(3, entity.getChapterId());
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(4, chapterName);
        }
        stmt.bindLong(5, entity.getCollect() ? 1L: 0L);
        stmt.bindLong(6, entity.getCourseId());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        String envelopePic = entity.getEnvelopePic();
        if (envelopePic != null) {
            stmt.bindString(8, envelopePic);
        }
        stmt.bindLong(9, entity.getId());
        stmt.bindLong(10, entity.getFresh() ? 1L: 0L);
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(11, link);
        }
 
        String niceDate = entity.getNiceDate();
        if (niceDate != null) {
            stmt.bindString(12, niceDate);
        }
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(13, origin);
        }
 
        String projectLink = entity.getProjectLink();
        if (projectLink != null) {
            stmt.bindString(14, projectLink);
        }
        stmt.bindLong(15, entity.getPublishTime());
 
        String superChapterName = entity.getSuperChapterName();
        if (superChapterName != null) {
            stmt.bindString(16, superChapterName);
        }
        stmt.bindLong(17, entity.getSuperChapterId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(18, title);
        }
        stmt.bindLong(19, entity.getType());
        stmt.bindLong(20, entity.getUserId());
        stmt.bindLong(21, entity.getVisible());
        stmt.bindLong(22, entity.getZan());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(1, author);
        }
 
        String apkLink = entity.getApkLink();
        if (apkLink != null) {
            stmt.bindString(2, apkLink);
        }
        stmt.bindLong(3, entity.getChapterId());
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(4, chapterName);
        }
        stmt.bindLong(5, entity.getCollect() ? 1L: 0L);
        stmt.bindLong(6, entity.getCourseId());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        String envelopePic = entity.getEnvelopePic();
        if (envelopePic != null) {
            stmt.bindString(8, envelopePic);
        }
        stmt.bindLong(9, entity.getId());
        stmt.bindLong(10, entity.getFresh() ? 1L: 0L);
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(11, link);
        }
 
        String niceDate = entity.getNiceDate();
        if (niceDate != null) {
            stmt.bindString(12, niceDate);
        }
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(13, origin);
        }
 
        String projectLink = entity.getProjectLink();
        if (projectLink != null) {
            stmt.bindString(14, projectLink);
        }
        stmt.bindLong(15, entity.getPublishTime());
 
        String superChapterName = entity.getSuperChapterName();
        if (superChapterName != null) {
            stmt.bindString(16, superChapterName);
        }
        stmt.bindLong(17, entity.getSuperChapterId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(18, title);
        }
        stmt.bindLong(19, entity.getType());
        stmt.bindLong(20, entity.getUserId());
        stmt.bindLong(21, entity.getVisible());
        stmt.bindLong(22, entity.getZan());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 8);
    }    

    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // author
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // apkLink
            cursor.getInt(offset + 2), // chapterId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chapterName
            cursor.getShort(offset + 4) != 0, // collect
            cursor.getInt(offset + 5), // courseId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // desc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // envelopePic
            cursor.getInt(offset + 8), // id
            cursor.getShort(offset + 9) != 0, // fresh
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // link
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // niceDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // origin
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // projectLink
            cursor.getLong(offset + 14), // publishTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // superChapterName
            cursor.getInt(offset + 16), // superChapterId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // title
            cursor.getInt(offset + 18), // type
            cursor.getInt(offset + 19), // userId
            cursor.getInt(offset + 20), // visible
            cursor.getInt(offset + 21) // zan
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setAuthor(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setApkLink(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapterId(cursor.getInt(offset + 2));
        entity.setChapterName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCollect(cursor.getShort(offset + 4) != 0);
        entity.setCourseId(cursor.getInt(offset + 5));
        entity.setDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEnvelopePic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setId(cursor.getInt(offset + 8));
        entity.setFresh(cursor.getShort(offset + 9) != 0);
        entity.setLink(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNiceDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrigin(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProjectLink(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPublishTime(cursor.getLong(offset + 14));
        entity.setSuperChapterName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSuperChapterId(cursor.getInt(offset + 16));
        entity.setTitle(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setType(cursor.getInt(offset + 18));
        entity.setUserId(cursor.getInt(offset + 19));
        entity.setVisible(cursor.getInt(offset + 20));
        entity.setZan(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Article entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Article entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "articles" to-many relationship of NaviArticle. */
    public List<Article> _queryNaviArticle_Articles(int chapterId) {
        synchronized (this) {
            if (naviArticle_ArticlesQuery == null) {
                QueryBuilder<Article> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChapterId.eq(null));
                naviArticle_ArticlesQuery = queryBuilder.build();
            }
        }
        Query<Article> query = naviArticle_ArticlesQuery.forCurrentThread();
        query.setParameter(0, chapterId);
        return query.list();
    }

}
