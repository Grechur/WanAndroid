package com.grechur.wanandroid.model.entity.navigation;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.grechur.wanandroid.model.entity.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NAVI_ARTICLE".
*/
public class NaviArticleDao extends AbstractDao<NaviArticle, Integer> {

    public static final String TABLENAME = "NAVI_ARTICLE";

    /**
     * Properties of entity NaviArticle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cid = new Property(0, int.class, "cid", true, "CID");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
    }

    private DaoSession daoSession;


    public NaviArticleDao(DaoConfig config) {
        super(config);
    }
    
    public NaviArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NAVI_ARTICLE\" (" + //
                "\"CID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: cid
                "\"name\" TEXT);"); // 1: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NAVI_ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NaviArticle entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NaviArticle entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
    }

    @Override
    protected final void attachEntity(NaviArticle entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public NaviArticle readEntity(Cursor cursor, int offset) {
        NaviArticle entity = new NaviArticle( //
            cursor.getInt(offset + 0), // cid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NaviArticle entity, int offset) {
        entity.setCid(cursor.getInt(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(NaviArticle entity, long rowId) {
        return entity.getCid();
    }
    
    @Override
    public Integer getKey(NaviArticle entity) {
        if(entity != null) {
            return entity.getCid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NaviArticle entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
